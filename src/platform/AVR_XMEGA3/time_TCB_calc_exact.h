//
// Generated by tools/xmega3/time_TCB_calc_exact.sh on Sat Sep 21 06:34:15 PM EDT 2024
//
// This script requires the following macros to be set:
//    TIMER_CLOCK: The base clock rate of the timer
//    TIMER_HZ   : The desired frequency of the timer signal
//    COUNTER_MAX: The maximum value of the timer's counter
//
// This script sets the following macros:
//    TIMER_TOP  : The value of the timer's PER register
//    TIMER_SRC  : The value of the CLKSEL bits in the timer's CTRLA register
//    TIMER_ERROR: The difference between the frequency given by the selected
//                 values and the desired frequency
//
#undef DONE
#undef TIMER_ERROR

#define TIMER_ERROR (TIMER_HZ)


#if (TIMER_CLOCK / TIMER_HZ) < 1
# error "Unable to calculate timer values, input clock too slow"
# define DONE 1
#endif

#if !defined(DONE)
# undef TEST_MOD
# undef TEST_DIV
# define TEST_MOD ((TIMER_CLOCK) % TIMER_HZ)
# define TEST_DIV ((TIMER_CLOCK) / TIMER_HZ)
# if TEST_DIV > 0 && TEST_DIV <= COUNTER_MAX + 1
#  if TEST_MOD == 0
#   define DONE 1
#  endif
#  if TEST_MOD < TIMER_ERROR
#   undef TIMER_ERROR
#   undef TIMER_SRC
#   undef TIMER_TOP
#   define TIMER_ERROR ((TIMER_CLOCK) % TIMER_HZ)
#   define TIMER_SRC ((uint8_t )0 << TCB_CLKSEL_gp)
#   define TIMER_TOP (((TIMER_CLOCK) / TIMER_HZ) - 1U)
#  endif
# endif
#endif

#if !defined(DONE)
# undef TEST_MOD
# undef TEST_DIV
# define TEST_MOD ((TIMER_CLOCK/2U) % TIMER_HZ)
# define TEST_DIV ((TIMER_CLOCK/2U) / TIMER_HZ)
# if TEST_DIV > 0 && TEST_DIV <= COUNTER_MAX + 1
#  if TEST_MOD == 0
#   define DONE 1
#  endif
#  if TEST_MOD < TIMER_ERROR
#   undef TIMER_ERROR
#   undef TIMER_SRC
#   undef TIMER_TOP
#   define TIMER_ERROR ((TIMER_CLOCK/2U) % TIMER_HZ)
#   define TIMER_SRC ((uint8_t )1 << TCB_CLKSEL_gp)
#   define TIMER_TOP (((TIMER_CLOCK/2U) / TIMER_HZ) - 1U)
#  endif
# endif
#endif

#if TIMER_ERROR == TIMER_HZ
# error "Unable to calculate timer values, input clock likely too fast"
#endif
#undef DONE
#undef TEST_MOD
#undef TEST_DIV
