//
// Generated by tools/xmega3/time_TCA_calc_PWM.sh on Sun Sep  1 06:26:30 PM EDT 2024
//
// This script requires the following macros to be set:
//    TIMER_CLOCK : The base clock rate of the timer
//    TIMER_HZ   : The desired frequency of the PWM cycle
//    TIMER_TOP  : The value of the timer's PER register
//
// This script sets the following macros:
//    TIMER_PSC  : The value of the CLKSEL bits in the timer's CTRLA register
//
// This script finds the value for TIMER_PSC that will give a frequency of no
// more than TIMER_HZ with the given value of TIMER_TOP, or if that constraint
// can't be met it will give the lowest frequency achievable
//
#undef DONE


#if ! defined(DONE) && (TIMER_CLOCK / (TIMER_TOP * 1)) <= TIMER_HZ
# define DONE 1
# define TIMER_PSC (TCA_SINGLE_CLKSEL_DIV1_gc)
#endif

#if ! defined(DONE) && (TIMER_CLOCK / (TIMER_TOP * 2)) <= TIMER_HZ
# define DONE 1
# define TIMER_PSC (TCA_SINGLE_CLKSEL_DIV2_gc)
#endif

#if ! defined(DONE) && (TIMER_CLOCK / (TIMER_TOP * 4)) <= TIMER_HZ
# define DONE 1
# define TIMER_PSC (TCA_SINGLE_CLKSEL_DIV4_gc)
#endif

#if ! defined(DONE) && (TIMER_CLOCK / (TIMER_TOP * 8)) <= TIMER_HZ
# define DONE 1
# define TIMER_PSC (TCA_SINGLE_CLKSEL_DIV8_gc)
#endif

#if ! defined(DONE) && (TIMER_CLOCK / (TIMER_TOP * 16)) <= TIMER_HZ
# define DONE 1
# define TIMER_PSC (TCA_SINGLE_CLKSEL_DIV16_gc)
#endif

#if ! defined(DONE) && (TIMER_CLOCK / (TIMER_TOP * 64)) <= TIMER_HZ
# define DONE 1
# define TIMER_PSC (TCA_SINGLE_CLKSEL_DIV64_gc)
#endif

#if ! defined(DONE) && (TIMER_CLOCK / (TIMER_TOP * 256)) <= TIMER_HZ
# define DONE 1
# define TIMER_PSC (TCA_SINGLE_CLKSEL_DIV256_gc)
#endif

#if ! defined(DONE) && (TIMER_CLOCK / (TIMER_TOP * 1024)) <= TIMER_HZ
# define DONE 1
# define TIMER_PSC (TCA_SINGLE_CLKSEL_DIV1024_gc)
#endif

#if ! defined(DONE)
# define TIMER_PSC (TCA_SINGLE_CLKSEL_DIV1024_gc)
#endif

#undef DONE
