#!/bin/bash

prescalers=( 1 2 4 8 16 64 256 1024 )


preamble() {
	cat << EOF
//
// Generated by ${0} on $(date)
//
// This script requires the following macros to be set:
//    TIMER_CLOCK: The base clock rate of the timer
//    TIMER_HZ   : The desired frequency of the timer signal
//    COUNTER_MAX: The maximum value of the timer's counter
//
// This script sets the following macros:
//    TIMER_TOP  : The value of the timer's PER register
//    TIMER_PSC  : The value of the CLKSEL bits in the timer's CTRLA register
//    TIMER_ERROR: The difference between the frequency given by the selected
//                 values and the desired frequency
//
#undef DONE
#undef TIMER_ERROR

#define TIMER_ERROR (TIMER_HZ)


#if (TIMER_CLOCK / TIMER_HZ) < 1
# error "Unable to calculate timer values, input clock too slow"
# define DONE 1
#endif
EOF
}

test_body() {
	PSC="${1}"

	cat << EOF

#if !defined(DONE) && ((TIMER_CLOCK/(TIMER_HZ * ${PSC})) < COUNTER_MAX + 1)
# if (TIMER_CLOCK % (TIMER_HZ * ${PSC})) < TIMER_ERROR
#  undef TIMER_ERROR
#  undef TIMER_TOP
#  undef TIMER_PSC

#  define TIMER_ERROR (TIMER_CLOCK % (TIMER_HZ * ${PSC}U))
#  define TIMER_TOP ((TIMER_CLOCK / (TIMER_HZ * ${PSC}U)) - 1U)
#  define TIMER_PSC (TCA_SINGLE_CLKSEL_DIV${PSC}_gc)

#  if TIMER_ERROR == 0
#   define DONE 1
#  endif
# endif
#endif
EOF
}

postamble() {
	cat << EOF

#if TIMER_ERROR == TIMER_HZ
# error "Unable to calculate timer values, input clock likely too fast"
#endif
#undef DONE
EOF
}

preamble
for psc in ${prescalers[@]}; do
	#test_body | sed "s|__PSC__|${psc}|g"
	test_body "${psc}"
done
postamble
