#!/bin/bash

# The clock sources are the core clock, the core clock divided by 2, or the
# prescaled TCA clock. We don't test the TCA clock because
#    1. We don't know what it is
#    2. It may change
# The clock sources must be listed in the order of their representation in
# the CLKSEL bits of CTRLA
clock_sources=( "(TIMER_CLOCK)" "(TIMER_CLOCK/2U)" )

preamble() {
	cat << EOF
//
// Generated by ${0} on $(date)
//
// This script requires the following macros to be set:
//    TIMER_CLOCK: The base clock rate of the timer
//    TIMER_HZ   : The desired frequency of the timer signal
//    TIMER_TOP  : The value of the timer's CCMP register
//
// This script sets the following macros:
//    TIMER_SRC  : The value of the CLKSEL bits in the timer's CTRLA register
//
// This script finds the value for TIMER_SRC that will give a frequency of no
// more than TIMER_HZ with the given value of TIMER_TOP, or if that constraint
// can't be met it will give the lowest frequency achievable
//
#undef DONE
EOF
}

test_body() {
	SRC="${1}"
	REG="${2}"

	cat << EOF

#if !defined(DONE) && (TIMER_CLOCK / (TIMER_TOP * ${SRC})) <= TIMER_HZ
# define DONE 1
# define TIMER_SRC ((uint8_t )${REG} << TCB_CLKSEL_gp)
#endif
EOF
}

postamble() {
	cat << EOF

#if !defined(DONE)
# define TIMER_SRC (TCB_CLKSEL_CLKDIV2_gc)
#endif

#undef DONE
EOF
}

preamble
i=0
for src in ${clock_sources[@]}; do
	test_body "${src}" "${i}"
	((i+=1))
done
postamble
